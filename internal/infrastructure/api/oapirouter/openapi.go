// Package oapirouter provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package oapirouter

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

const (
	Api_keyScopes = "api_key.Scopes"
)

// Link defines model for link.
type Link struct {
	CreatedAt  *string `json:"created_at,omitempty"`
	FullUrl    *string `json:"full_url,omitempty"`
	Id         *int64  `json:"id,omitempty"`
	ShortUrl   *string `json:"short_url,omitempty"`
	UsageCount *int    `json:"usage_count,omitempty"`
	UserId     *int64  `json:"user_id,omitempty"`
}

// User defines model for user.
type User struct {
	CreatedAt *string `json:"created_at,omitempty"`
	DeletedAt *string `json:"deleted_at,omitempty"`
	Id        *int64  `json:"id,omitempty"`
	Login     *string `json:"login,omitempty"`
	Name      *string `json:"name,omitempty"`
	Password  *string `json:"password,omitempty"`
}

// PostLinksParams defines parameters for PostLinks.
type PostLinksParams struct {
	// Body Поля пользователя
	Body Link `form:"body" json:"body"`
}

// PutLinksLinkIdJSONBody defines parameters for PutLinksLinkId.
type PutLinksLinkIdJSONBody struct {
	// FullUrl Update full_url of the element
	FullUrl *string `json:"full_url,omitempty"`

	// ShortUrl Update short_url of the element
	ShortUrl *string `json:"short_url,omitempty"`
}

// PostUseUrlParams defines parameters for PostUseUrl.
type PostUseUrlParams struct {
	// ShortUrl Короткий url по которому будет найден полный url
	ShortUrl string `form:"short_url" json:"short_url"`
}

// PostUserLoginParams defines parameters for PostUserLogin.
type PostUserLoginParams struct {
	// Login Логин авторизации
	Login string `form:"login" json:"login"`

	// Password Пароль авторизации
	Password string `form:"password" json:"password"`
}

// PutUsersUserIdJSONBody defines parameters for PutUsersUserId.
type PutUsersUserIdJSONBody struct {
	// Name Update name of the user
	Name *string `json:"name,omitempty"`
}

// PutLinksLinkIdJSONRequestBody defines body for PutLinksLinkId for application/json ContentType.
type PutLinksLinkIdJSONRequestBody PutLinksLinkIdJSONBody

// PostUsersJSONRequestBody defines body for PostUsers for application/json ContentType.
type PostUsersJSONRequestBody = User

// PutUsersUserIdJSONRequestBody defines body for PutUsersUserId for application/json ContentType.
type PutUsersUserIdJSONRequestBody PutUsersUserIdJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Вывод ссылок пользователя
	// (GET /links)
	GetLinks(c *gin.Context)
	// Добавление новой ссылки
	// (POST /links)
	PostLinks(c *gin.Context, params PostLinksParams)
	// Удаление ссылки
	// (DELETE /links/{linkId})
	DeleteLinksLinkId(c *gin.Context, linkId int64)
	// Вывод ссылки пользователя
	// (GET /links/{linkId})
	GetLinksLinkId(c *gin.Context, linkId int64)
	// Обновление ссылки
	// (PUT /links/{linkId})
	PutLinksLinkId(c *gin.Context, linkId int64)
	// Поиск полной ссылки для перехода
	// (POST /use-url)
	PostUseUrl(c *gin.Context, params PostUseUrlParams)
	// Авторизация
	// (POST /user/login)
	PostUserLogin(c *gin.Context, params PostUserLoginParams)
	// Выход из текущей сессии
	// (POST /user/logout)
	PostUserLogout(c *gin.Context)
	// Создание пользователя
	// (POST /users)
	PostUsers(c *gin.Context)
	// Удаление пользователя
	// (DELETE /users/{userId})
	DeleteUsersUserId(c *gin.Context, userId int64)
	// Вывод данных пользователя
	// (GET /users/{userId})
	GetUsersUserId(c *gin.Context, userId int64)
	// Обновление пользователя
	// (PUT /users/{userId})
	PutUsersUserId(c *gin.Context, userId int64)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetLinks operation middleware
func (siw *ServerInterfaceWrapper) GetLinks(c *gin.Context) {

	c.Set(Api_keyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetLinks(c)
}

// PostLinks operation middleware
func (siw *ServerInterfaceWrapper) PostLinks(c *gin.Context) {

	var err error

	c.Set(Api_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostLinksParams

	// ------------- Required query parameter "body" -------------

	if paramValue := c.Query("body"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument body is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "body", c.Request.URL.Query(), &params.Body)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter body: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostLinks(c, params)
}

// DeleteLinksLinkId operation middleware
func (siw *ServerInterfaceWrapper) DeleteLinksLinkId(c *gin.Context) {

	var err error

	// ------------- Path parameter "linkId" -------------
	var linkId int64

	err = runtime.BindStyledParameter("simple", false, "linkId", c.Param("linkId"), &linkId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter linkId: %s", err), http.StatusBadRequest)
		return
	}

	c.Set(Api_keyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteLinksLinkId(c, linkId)
}

// GetLinksLinkId operation middleware
func (siw *ServerInterfaceWrapper) GetLinksLinkId(c *gin.Context) {

	var err error

	// ------------- Path parameter "linkId" -------------
	var linkId int64

	err = runtime.BindStyledParameter("simple", false, "linkId", c.Param("linkId"), &linkId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter linkId: %s", err), http.StatusBadRequest)
		return
	}

	c.Set(Api_keyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetLinksLinkId(c, linkId)
}

// PutLinksLinkId operation middleware
func (siw *ServerInterfaceWrapper) PutLinksLinkId(c *gin.Context) {

	var err error

	// ------------- Path parameter "linkId" -------------
	var linkId int64

	err = runtime.BindStyledParameter("simple", false, "linkId", c.Param("linkId"), &linkId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter linkId: %s", err), http.StatusBadRequest)
		return
	}

	c.Set(Api_keyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutLinksLinkId(c, linkId)
}

// PostUseUrl operation middleware
func (siw *ServerInterfaceWrapper) PostUseUrl(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostUseUrlParams

	// ------------- Required query parameter "short_url" -------------

	if paramValue := c.Query("short_url"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument short_url is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "short_url", c.Request.URL.Query(), &params.ShortUrl)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter short_url: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostUseUrl(c, params)
}

// PostUserLogin operation middleware
func (siw *ServerInterfaceWrapper) PostUserLogin(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostUserLoginParams

	// ------------- Required query parameter "login" -------------

	if paramValue := c.Query("login"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument login is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "login", c.Request.URL.Query(), &params.Login)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter login: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "password" -------------

	if paramValue := c.Query("password"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument password is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "password", c.Request.URL.Query(), &params.Password)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter password: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostUserLogin(c, params)
}

// PostUserLogout operation middleware
func (siw *ServerInterfaceWrapper) PostUserLogout(c *gin.Context) {

	c.Set(Api_keyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostUserLogout(c)
}

// PostUsers operation middleware
func (siw *ServerInterfaceWrapper) PostUsers(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostUsers(c)
}

// DeleteUsersUserId operation middleware
func (siw *ServerInterfaceWrapper) DeleteUsersUserId(c *gin.Context) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId int64

	err = runtime.BindStyledParameter("simple", false, "userId", c.Param("userId"), &userId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter userId: %s", err), http.StatusBadRequest)
		return
	}

	c.Set(Api_keyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteUsersUserId(c, userId)
}

// GetUsersUserId operation middleware
func (siw *ServerInterfaceWrapper) GetUsersUserId(c *gin.Context) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId int64

	err = runtime.BindStyledParameter("simple", false, "userId", c.Param("userId"), &userId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter userId: %s", err), http.StatusBadRequest)
		return
	}

	c.Set(Api_keyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUsersUserId(c, userId)
}

// PutUsersUserId operation middleware
func (siw *ServerInterfaceWrapper) PutUsersUserId(c *gin.Context) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId int64

	err = runtime.BindStyledParameter("simple", false, "userId", c.Param("userId"), &userId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter userId: %s", err), http.StatusBadRequest)
		return
	}

	c.Set(Api_keyScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutUsersUserId(c, userId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/links", wrapper.GetLinks)
	router.POST(options.BaseURL+"/links", wrapper.PostLinks)
	router.DELETE(options.BaseURL+"/links/:linkId", wrapper.DeleteLinksLinkId)
	router.GET(options.BaseURL+"/links/:linkId", wrapper.GetLinksLinkId)
	router.PUT(options.BaseURL+"/links/:linkId", wrapper.PutLinksLinkId)
	router.POST(options.BaseURL+"/use-url", wrapper.PostUseUrl)
	router.POST(options.BaseURL+"/user/login", wrapper.PostUserLogin)
	router.POST(options.BaseURL+"/user/logout", wrapper.PostUserLogout)
	router.POST(options.BaseURL+"/users", wrapper.PostUsers)
	router.DELETE(options.BaseURL+"/users/:userId", wrapper.DeleteUsersUserId)
	router.GET(options.BaseURL+"/users/:userId", wrapper.GetUsersUserId)
	router.PUT(options.BaseURL+"/users/:userId", wrapper.PutUsersUserId)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RYzW7bRhB+FWLbo2IpadCDjkWAwmgOBQqfDMOgxZXEhCKZ3WULwRDgH7RF4AApipxa",
	"NEXRF6BVC5YlS3mF2TcqZkiRlESJlGPHsS+muD+zO983M9/wkDW8ju+53FWS1Q+ZbLR5x6RHx3Zf4n9f",
	"eD4Xyub0tiG4qbi1byr8pbo+Z3UmlbDdFutVWDNwnP1AOLmDtoWvm57o4Gpmu+rrp6wym2e7ire4wImy",
	"7Qm1cptAmi2+3/ACN3uGzPJAcrFf0lgveeUdvOANNVu/8c0t7vA1w6Xv7ngt283dwjU7PHfAN6X8yRNW",
	"zuDy9dC9vBEIW3V/QLCjy5m+vf+Sd/ERrbM2Ny0u2MxoMp5sZ/r2d7zLerif7TY9sm0rB8d2hPOIIOQu",
	"7fEjF9L2cNvHW7WtGh7Z87lr+jars6+2aluPGV5CtekoVSQePbU4+RJBMJXtudsWq7NvuXpOEypMcOl7",
	"roxu8KRWI5Q8V/GIGKbvO3aDVlZfSM9N+U3XVLxDC78UvMnq7ItqGgnVOAzoKCz1oSmEGd/Z4rIhbF9F",
	"95JBo8GlbAaOkZx2ztWsvptx8u5eb6/CZNDpmKLL6gx+12fQhylcGPpYH+szGMMURgZ8gCmM9Ru4hCn0",
	"IdQnMICxfoswmC3J6rtRlO4hCTyZ463vPZm4yzeF2eGKC0mnmb8B/E2m3q6zScx4FXDRTYlx4FldguJV",
	"YAtusboSAa9k/FzsXvTFR0FZwkRJxCrsaWR7fvKBaRl4Qy7VJqi+gymcQwh9GMMAJjCEgQETcusUrlKo",
	"RzBcRrRXiSOheoj/tq1edC7MMss4P6P3hPRzml2E9/azRfuELkZhCq4z22o1vMUJdgW6G8FRmgrzKbvD",
	"JdaKcnlxiSI3RP1fuIAwg/h6mCvrs9wDAfMeQvWjkusIhpsl1yAvtwZ3h9HGmBBNv8FkfPNwyYq3+cPv",
	"+JapuDGbYHhNQ7W5wR3eQTuVZU0yJ+FyN0tmFO5Gf59fjXhISek9nMeVp2xiwvoTSP4ohnC1vNiRfEc4",
	"hfriD5jqI5jqEzQHVwYCjyFowIje0ihc61MDzvUpXMBAn2C1DOEKf8AkDliY6LNo+QpFkjJvXapbdP3n",
	"pEGe1J4uRw38FamHxB8wjQiQgowSbqiPE+FIiF8tZL2Lmcob6CMY6J8xMUKYwd8PDhy7kTJAVJOWZEaC",
	"hZO9gxAmMS5wjcBRtqWkewl9fQShfg0hIUpjIzw/q+STSTwnc0V8+hOm8B8MkRch9GMCDeESQv0LDNME",
	"u8AOJ968PDMqOVI5JLKO9ZvNjCeN2qdk5lIyvas0V2gIKQwfkA7QhyHV3pg04xTMIYyj4pz4eJHmvy17",
	"fK5qm4FqL9DXi+r32iSGvMN59+PujeRMFLXoq0uDZMtIn+rXMKBghwEGfMzCFT6Rxd6Q7OayYl0ypI8r",
	"t1DQ54sq7rp90y8+t90dplj9QxnwgvIjdX/FmpP8k0GqehjdrUT7R7DtRJ4oVqNFjf68Mg1m2953K3gn",
	"PVp5XFb3aw/V+7ca1XfXu8VRNMHstxFeq3q3h4HXbfR1sw/HuW0YDs46MPLZJu3Xp4/cvEZmg6zaS14t",
	"qzp9CucoPvSvJEsGGS2rzzIiLtLHObrwfayqYxFo6ONsOcbqvOaksw/tWKjL7Q0hjGAEoT6FCR3zep6A",
	"pY+YtAchXJNqyHyNYL293v8BAAD//6De0QIlGgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

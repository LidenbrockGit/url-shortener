// Package routergin provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package routergin

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

const (
	JwtScopes = "jwt.Scopes"
)

// Link defines model for link.
type Link struct {
	CreatedAt  *string `json:"created_at,omitempty"`
	FullUrl    *string `json:"full_url,omitempty"`
	Id         *string `json:"id,omitempty"`
	ShortUrl   *string `json:"short_url,omitempty"`
	UsageCount *int    `json:"usage_count,omitempty"`
	UserId     *string `json:"user_id,omitempty"`
}

// LinkCreate defines model for linkCreate.
type LinkCreate struct {
	FullUrl  *string `json:"full_url,omitempty"`
	ShortUrl *string `json:"short_url,omitempty"`
}

// UserAccount defines model for userAccount.
type UserAccount struct {
	Id    *string `json:"id,omitempty"`
	Login *string `json:"login,omitempty"`
	Name  *string `json:"name,omitempty"`
}

// UserLogin defines model for userLogin.
type UserLogin struct {
	Login    string `json:"login"`
	Password string `json:"password"`
}

// UserRegist defines model for userRegist.
type UserRegist struct {
	Login    string `json:"login"`
	Name     string `json:"name"`
	Password string `json:"password"`
}

// PutAccountJSONBody defines parameters for PutAccount.
type PutAccountJSONBody struct {
	// Name Update name of the user
	Name *string `json:"name,omitempty"`

	// Password Update password of the user
	Password *string `json:"password,omitempty"`
}

// PutLinksLinkIdJSONBody defines parameters for PutLinksLinkId.
type PutLinksLinkIdJSONBody struct {
	// FullUrl Update full_url of the element
	FullUrl *string `json:"full_url,omitempty"`

	// ShortUrl Update short_url of the element
	ShortUrl *string `json:"short_url,omitempty"`
}

// PostUseUrlParams defines parameters for PostUseUrl.
type PostUseUrlParams struct {
	// ShortUrl Короткий url по которому будет найден полный url
	ShortUrl string `form:"short_url" json:"short_url"`
}

// PutAccountJSONRequestBody defines body for PutAccount for application/json ContentType.
type PutAccountJSONRequestBody PutAccountJSONBody

// PostLinksJSONRequestBody defines body for PostLinks for application/json ContentType.
type PostLinksJSONRequestBody = LinkCreate

// PutLinksLinkIdJSONRequestBody defines body for PutLinksLinkId for application/json ContentType.
type PutLinksLinkIdJSONRequestBody PutLinksLinkIdJSONBody

// PostLoginJSONRequestBody defines body for PostLogin for application/json ContentType.
type PostLoginJSONRequestBody = UserLogin

// PostRegistJSONRequestBody defines body for PostRegist for application/json ContentType.
type PostRegistJSONRequestBody = UserRegist

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Удаление аккаунта
	// (DELETE /account)
	DeleteAccount(c *gin.Context)
	// Вывод данных пользователя
	// (GET /account)
	GetAccount(c *gin.Context)
	// Обновление пользователя
	// (PUT /account)
	PutAccount(c *gin.Context)
	// Вывод ссылок пользователя
	// (GET /links)
	GetLinks(c *gin.Context)
	// Добавление новой ссылки
	// (POST /links)
	PostLinks(c *gin.Context)
	// Удаление ссылки
	// (DELETE /links/{linkId})
	DeleteLinksLinkId(c *gin.Context, linkId string)
	// Вывод ссылки пользователя
	// (GET /links/{linkId})
	GetLinksLinkId(c *gin.Context, linkId string)
	// Обновление ссылки
	// (PUT /links/{linkId})
	PutLinksLinkId(c *gin.Context, linkId string)
	// Авторизация
	// (POST /login)
	PostLogin(c *gin.Context)
	// Выход из текущей сессии
	// (POST /logout)
	PostLogout(c *gin.Context)
	// Регистрация
	// (POST /regist)
	PostRegist(c *gin.Context)
	// Поиск полной ссылки для перехода
	// (POST /use-url)
	PostUseUrl(c *gin.Context, params PostUseUrlParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// DeleteAccount operation middleware
func (siw *ServerInterfaceWrapper) DeleteAccount(c *gin.Context) {

	c.Set(JwtScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteAccount(c)
}

// GetAccount operation middleware
func (siw *ServerInterfaceWrapper) GetAccount(c *gin.Context) {

	c.Set(JwtScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAccount(c)
}

// PutAccount operation middleware
func (siw *ServerInterfaceWrapper) PutAccount(c *gin.Context) {

	c.Set(JwtScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutAccount(c)
}

// GetLinks operation middleware
func (siw *ServerInterfaceWrapper) GetLinks(c *gin.Context) {

	c.Set(JwtScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetLinks(c)
}

// PostLinks operation middleware
func (siw *ServerInterfaceWrapper) PostLinks(c *gin.Context) {

	c.Set(JwtScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostLinks(c)
}

// DeleteLinksLinkId operation middleware
func (siw *ServerInterfaceWrapper) DeleteLinksLinkId(c *gin.Context) {

	var err error

	// ------------- Path parameter "linkId" -------------
	var linkId string

	err = runtime.BindStyledParameter("simple", false, "linkId", c.Param("linkId"), &linkId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter linkId: %s", err), http.StatusBadRequest)
		return
	}

	c.Set(JwtScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteLinksLinkId(c, linkId)
}

// GetLinksLinkId operation middleware
func (siw *ServerInterfaceWrapper) GetLinksLinkId(c *gin.Context) {

	var err error

	// ------------- Path parameter "linkId" -------------
	var linkId string

	err = runtime.BindStyledParameter("simple", false, "linkId", c.Param("linkId"), &linkId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter linkId: %s", err), http.StatusBadRequest)
		return
	}

	c.Set(JwtScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetLinksLinkId(c, linkId)
}

// PutLinksLinkId operation middleware
func (siw *ServerInterfaceWrapper) PutLinksLinkId(c *gin.Context) {

	var err error

	// ------------- Path parameter "linkId" -------------
	var linkId string

	err = runtime.BindStyledParameter("simple", false, "linkId", c.Param("linkId"), &linkId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter linkId: %s", err), http.StatusBadRequest)
		return
	}

	c.Set(JwtScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutLinksLinkId(c, linkId)
}

// PostLogin operation middleware
func (siw *ServerInterfaceWrapper) PostLogin(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostLogin(c)
}

// PostLogout operation middleware
func (siw *ServerInterfaceWrapper) PostLogout(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostLogout(c)
}

// PostRegist operation middleware
func (siw *ServerInterfaceWrapper) PostRegist(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostRegist(c)
}

// PostUseUrl operation middleware
func (siw *ServerInterfaceWrapper) PostUseUrl(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostUseUrlParams

	// ------------- Required query parameter "short_url" -------------

	if paramValue := c.Query("short_url"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument short_url is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "short_url", c.Request.URL.Query(), &params.ShortUrl)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter short_url: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostUseUrl(c, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.DELETE(options.BaseURL+"/account", wrapper.DeleteAccount)
	router.GET(options.BaseURL+"/account", wrapper.GetAccount)
	router.PUT(options.BaseURL+"/account", wrapper.PutAccount)
	router.GET(options.BaseURL+"/links", wrapper.GetLinks)
	router.POST(options.BaseURL+"/links", wrapper.PostLinks)
	router.DELETE(options.BaseURL+"/links/:linkId", wrapper.DeleteLinksLinkId)
	router.GET(options.BaseURL+"/links/:linkId", wrapper.GetLinksLinkId)
	router.PUT(options.BaseURL+"/links/:linkId", wrapper.PutLinksLinkId)
	router.POST(options.BaseURL+"/login", wrapper.PostLogin)
	router.POST(options.BaseURL+"/logout", wrapper.PostLogout)
	router.POST(options.BaseURL+"/regist", wrapper.PostRegist)
	router.POST(options.BaseURL+"/use-url", wrapper.PostUseUrl)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xZz27bxhN+FWJ/vyNjKWlOuqUNWrjIIWhr9BAIBk2NJSYUyewuG6gGAf9BWgQu0KLI",
	"qUCTAn0B2rVgWbaUV5h9o2KWpEjK1B8nFty6ycXx7nJ2dub7Zr5d7zDb7wa+B54UrLHDhN2BrqX/6zre",
	"M/oZcD8ALh3QozYHS0Jr05L0m+wFwBpMSO54bRaZbDt03c2Qu5WTTqtyWHR8Lmd+FAqrDZu2H3rFHR1P",
	"Qht4sgD4ZqXpyMxG/K2nYEtaTaf6TJ/h8tnmOj/Py6qNyK0H9sTv8k4zIuH6bcernPGsLlxh40eZofK2",
	"s+0HlhAvfD4jihyehw6HFms8SW0UvmjO8OEraDtCXsWJGYe8infahLmMk5RSsEPuyN7XBPrEuacvtMdb",
	"YHHgn/u8SzhnX377DTNZC4TNnUA6vsca7MHjdeMZ9AzpG1YoOz53vgeDXAEhxRozEyrRjokxNvGgI2XA",
	"InLA8bZ9fSZHujSzwd07Gmfg6Q++Ay6S3e6u1dfqFAo/AM8KHNZgn6zV1+7qM8qO9r1m5XBrgQsJxCn0",
	"Fvm83mIN9lCPZ7ik2InA90Ry+Hv1uqa470lIzFhB4Dq2/rz2VPheXiIu57ULgqi6FEppqBxOEdo2CLEd",
	"usbEYzrv/Rv0actqZRkt4YU1nqRIedKMmiYTYbdr8R5rMPwTTzDGc+zjCAfYNzDGIQ4xVgc4UvsYEwqs",
	"tiCoZtlqRiZrg7ycqy9AXlOi/s9hmzXY/2p5sa+llb5WrFNL52W5YPyqDvEYx3hi6KiMcKQO1UsD3+EY",
	"z9VPeIpjPMZY7WMfz9XPM2IThBWxeRyWYqNz9Knf6n0AVrLqUz7/RtCyJBg0afjbhuyAQRHL2VxdpSqN",
	"ZAvmG9L/PjLzupn5Bo9wpAFXYOdVkBiZrEbqQbs/i7CP9IIPzJ4joSsW8VbLszxWFudWb3UEVntqTx3i",
	"OY5xuEzYkkBp+vqiir++KMTq/ei7KDqpzIvKGkHyEKIV1tMkL7eWRq9xjEcYl2mU8GqMZzlOhjiogMOE",
	"Q7Ud+rHeihaLFQ2TR3q1Vjvc6oIELrST5fOsP5x2gJSmVkgsk5fMzUyVMWEWYjwdyubHcrxqobQAOOb8",
	"ivvvhsf1lZP3LutDHFyxrM9QZStLx4LwX4cCLN7/KwVctiATcOBCF7QEnf9cUGlssmKhtetQhP/hllWl",
	"/JbpU5M3lFTBlB3B19mVBs8MvMC+2k+uOsSsUzxWuxirVxjThKHnhrQ7M6uUUPpcsQollD8HrUAILZtZ",
	"k0n/GXi3qOXh79jHd5RkPMaBLpspFEgj/4UDHBk0ntTVWO0mtTXBbI7NX/CYsKF2cYCnGKsfcFC+foSy",
	"k+PRT4ruHEmdrPnHy5Vouh+plwl5Bnhq6L4zVAfqFfa1pMQ+0RUHJaoWIsPzl8Zqqv6BfUqJ2lP7mpY6",
	"yjP6He1ZSdL0PXN1LE03uFGakh/rrdssTXPYVaKiGmGhgDtpL59Nvg0BG9xdpHrwN033sdqn3oNnBikA",
	"gqKBQz2qZ/FCHRh4pA7wRDcQHGGMZ/QL1RUN3LTehHpLrZyeh8B7uXTKJcjN3XVIMW0s+TeT5QF1r37/",
	"Rgt/KR04ngbWWxwTrCYvJVp9nE2J7ROS1rSgr3axn9S/0vtwEG65jk0AjCaDl8D0Vh3gEXUZ9aPGQ78g",
	"RdRhjoXUWGResvAmdUHjHweG2itWXCrAc+4FqXXNlOVsTz2Ij/GiYCZ7hl7Sy0k4Y7zQvaFwZxAsakZ/",
	"BwAA///4c3Tg3hwAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
